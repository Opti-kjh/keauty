---
description: 
globs: 
alwaysApply: false
---
# React Native
귀하는 타입스크립트, 리액트 네이티브, 엑스포, 모바일 앱 개발 전문가입니다.

코드 스타일 및 구조:
- 간결하고 타입에 안전한 TypeScript 코드를 작성하세요.
- 클래스 컴포넌트보다 함수형 컴포넌트와 후크를 사용하세요. 화살표 함수를 사용하여 컴포넌트를 만들고 필요한 곳에 적절한 타이핑을 추가하세요
- 컴포넌트가 모듈식이고 재사용 가능하며 유지 관리가 가능한지 확인하세요.
- 기능별로 파일을 정리하고 관련 컴포넌트, 후크, 스타일을 그룹화하세요.
- 가능한 한 객체를 분리하세요
- 항상 컴포넌트 코드를 스타일에서 분리하세요. 스타일은 항상 별도의 파일에 넣어야 합니다. 예를 들어 프로필 화면을 만드는 경우, ‘profile-screen’ 폴더를 만들고 그 안에 ‘profile-screen/index.tsx'와 'profile-screen/styles.ts’ 두 파일을 만듭니다
- React 네이티브 프로젝트의 디렉토리 구조는 항상 다음과 같아야 합니다
- `components` 이 디렉토리에는 프로젝트에서 재사용할 수 있는 모든 컴포넌트가 포함되어 있습니다. 새 컴포넌트를 만들거나 새로운 디자인을 구현할 때마다 파일과 함께 해당 폴더를 만들어야 하는 디렉터리입니다. 예를 들어
```
components/button // 버튼 컴포넌트 내용
├── index.tsx // 모든 컴포넌트 로직이 들어 있습니다
├── styles. ts // 컴포넌트 스타일링 포함
└── types.ts // 컴포넌트와 관련된 모든 유형 포함
```
- 컴포넌트는 먼저 화살표 함수로 선언한 다음 기본값으로 내보내야 합니다. 예:
```ts
// 모든 가져오기 및 기타 항목
import { MyButtonProps } from './types';
// ...
const MyButton: FC<PropsWithChildren<MyButtonProps>> = ({
// ... props
}) => {
// 모든 코메넨트 레벨 로직
// ...
return (
// UI 요소는 여기로
)
}
``` - `app`에는 모든 페이지와 레이아웃이 포함되어야 합니다. 자세한 설명은 문서를 참조하세요 https://docs.expo.dev/develop/file-based-routing/ - `services` 이 디렉토리에는 프로젝트 내의 모든 도움말 자료가 포함되어 있습니다. 예시는 다음과 같습니다 ``` services ├── apis // 전체 앱의 apis를 포함합니다 │ ├── axios-client. ts
│ └── index.ts
├── constants // 앱에서 사용되는 상수와 문자열을 포함합니다
│ └── index.ts
└── types // 재사용 가능한 앱의 모든 유형을 포함합니다. 그러나 signle 컴포넌트에서 사용되는 타입은 자체 디렉토리 types.ts 파일
├── api-types.ts
└── form-types.ts
```

apis 구현하기:
- apis는 `services/apis`라는 파일에 있습니다. 새 API를 구현할 때마다 먼저 apis 객체에 추가하세요. apis 파일의 예는 다음과 같습니다.
``` js
// ...
export const apis = {
// ...
authenticateWithFirebaseToken: ({ idToken }: ApiTypes.Authenticate) => axiosClient.post<ApiTypes.AuthResponse>("auth/authenticate", { idToken }),
// ...
};
// ...
그리고 사용해야 할 때마다 다음과 같이 apis 객체에서 호출하세요.

``` js
const { data } = await apis.authenticate({ idToken });
```

화면 구현:
- 구성 요소와 마찬가지로 화면을 구현하라는 요청을 받을 때마다 디렉토리 앱에 폴더를 만드세요. 이 폴더에는 항상 `index.tsx`와 `styles.ts` 파일이 들어 있고, 필요할 때만 `types`와 `_layout.tsx`가 들어 있습니다. 예를 들어 검색 페이지는 다음과 같이 보일 수 있습니다
```
app/search // 검색 페이지의 내용
├── index.tsx // 모든 화면 로직이 들어 있음
├── styles. ts // 화면 스타일링 포함
├── _layout.tsx // 화면 레이아웃 포함(선택 사항)
└── types.ts // 화면과 관련된 모든 유형 포함(선택 사항)
```
- `index.tsx` 파일에서 화면의 이름을 올바르게 선언해야 합니다(예: 검색 화면의 경우 이름은 `Seach`여야 합니다).
- 화면 컴포넌트는 화살표 함수로 선언한 다음 기본값으로 내보내야 합니다.
```ts
// 모든 가져오기 및 기타 항목
// ...
const Search: FC<PropsWithChildren> = () => {
// 모든 코멘트 레벨 로직
// ...
return (
// 화면 요소는 여기로 이동
)
}
// ...
export default Search;
```
- 종종 화면에는 코드베이스에 이미 선언된 컴포넌트가 포함될 수 있습니다. 예를 들어 버튼, 입력 필드, 카드, 모달 등은 `components` 폴더에서 찾을 수 있으며, 구현으로 넘어가기 전에 `components` 폴더에서 사용할 수 있는 것이 있는지 확인하세요.
- 화면에 입력 필드가 있을 때마다 키보드 가시성에 따라 화면이 조정되도록 스크롤 보기를 피하고 키보드를 사용하세요
- 데이터 입력 및 유효성 검사에는 항상 formik과 yup을 사용하세요

명명 규칙:
- 변수 및 함수 이름에는 대/소문자를 구분하는 카멜케이스를 사용합니다(예: `온클릭`, `핸들 제출`).
- 리액트 및 리액트 네이티브의 컴포넌트 이름에는 파스칼 케이스를 사용합니다(예: `UserProfile`, `ChatScreen`).
- 디렉토리 이름은 소문자와 하이픈으로 묶어야 합니다(예: `user-profile`, `chat-screen`).
- 변수나 컴포넌트에 모호한 이름을 사용하지 마세요

타입스크립트 사용:
- 모든 컴포넌트에 타입스크립트를 사용하고, 소품과 상태에 대한 인터페이스를 선호합니다.
- tconfig.json`에서 엄격한 타이핑을 사용하세요.
- any` 사용을 피하고 정확한 타입을 사용하세요.
- 프롭으로 함수형 컴포넌트를 정의할 때는 `React.FC`를 활용하세요.

UI와 

Translated with DeepL.com (free version)